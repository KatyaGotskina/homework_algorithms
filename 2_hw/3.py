# Я создаю новую матрицу, каждая ячейка которой отражает количество возможных путей до нее добраться.
# Заполняю ее, учитывая полученную карту с препятствиями. Сложность алгоритма О (n ** 2)

from typing import List


def uniquePathsWithObstacles(obstacleGrid: List[List[int]]) -> int:

    matrix = [[1] * len(obstacleGrid) for _ in range(len(obstacleGrid))]  # создание матрицы, заполненной единицами, 
                                                                          # таким же размером, как матрица, полученная функцией 

    for i in range(1, len(matrix)):         # Обход ячеек созданной матрицы
        for j in range(1, len(matrix)):
            if obstacleGrid[i][j] + obstacleGrid[i-1][j] + obstacleGrid[i][j-1] == 0:    # Если к клетке полученной карты есть доступ и сверху и слева,
                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]                           # а так же на клетке нет препятствия, то 
                                                                                         # количество возможных путей до нее добраться является суммой
                                                                                         # количества возможных путей добраться до ячейки выше нее                                                                                   
                                                                                         # и количества возможных путей добраться до ячейки левее 

            elif obstacleGrid[i][j-1] + obstacleGrid[i-1][j] == 2 or obstacleGrid[i][j] == 1: # Если до клетки не добраться или на ней препятствие,
                matrix[i][j] = 0                                                              # то в созданной матрице ставим 0
              
            elif obstacleGrid[i-1][j] == 1:
                matrix[i][j] = matrix[i][j-1]
                                                     # Если ячейка выше или левее занята препятствием, то в резултатом является
                                                     # количество возможных путей добраться до ячейки левее или выше соответственно 
            elif obstacleGrid[i][j-1] == 1:
                matrix[i][j] = matrix[i-1][j]         

    return matrix[-1][-1]
