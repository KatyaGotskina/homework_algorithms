# Решаю задачу с помощью динамического программирования. Поскольку дома стоят в кругу, 
# нельзя обокрасть первый и последний дом одновременно, это условие является единственным отличием 
# от задачи Robber 1, в которой дома стояли друг за другом. Поэтому я рассматриваю линейное расположение домов, 
# без учета последнего, а так же линейное расположение домов, без учета первого, а затем беру наиболее прибыльный вариант.
# Сложность O ( n )

def rob(nums):
    nums_for_dp2 = nums[1:]  # Список домов без первого дома
    dp1 = [0] * (len(nums) - 1)   # Список для вычисления макс прибыли путем его заполнения из домов, без учета последнего
    dp2 = [0] * len(nums_for_dp2)   # Список для вычисления макс прибыли путем его заполнения из домов, без учета первого
    dp1[0], dp2[0] = nums[0], nums_for_dp2[0]
    dp1[1], dp2[1] = max(nums[0], nums[1]), max(nums_for_dp2[0], nums_for_dp2[1])
    for i in range(2, len(nums) - 1):
        dp1[i] = max(dp1[i-1], dp1[i-2]+nums[i])
    for i in range(2, len(nums_for_dp2)):                 # Заполняем оба списка 
        dp2[i] = max(dp2[i-1], dp2[i-2]+nums_for_dp2[i])

    return max(dp1[-1], dp2[-1])   # Берем максимум из максимумов обоих случаев 

